{"version":3,"sources":["components/navigation/TopNavigation.tsx","components/sortingComponents/MergeSort.tsx","components/sortingComponents/HeapSort.tsx","components/sortingComponents/InsertionSort.tsx","components/sortingComponents/BubbleSort.tsx","components/sortingComponents/selectionSort.tsx","components/sortingComponents/QuickSort.tsx","components/main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopNavigation","props","changeSize","event","target","value","setState","sendData","type","state","method","gerateArray","startSort","startSorting","changeType","changeSpeed","parseInt","updateData","className","onClick","this","onChange","id","Component","MergeSort","array","toSort","start","interval","sort","timer","next","i","length","setInterval","sorted","Array","from","n","buffer","size","leftStart","left","right","Math","min","leftLimit","rightLimit","bufferLeft","toCreateElements","temp","clearInterval","j","getChild","HeapSort","toStart","heapSort","arr","splitValue","largest","heapify","floor","unSortArrLength","undefined","InsertionSort","len","mainElem","comparingElement","BubbleSort","bubbleSort","comparingElem","red","green","SelectionSort","minElement","currentElem","QuickSort","stack","low","high","push","range","pop","pivot","console","log","Main","arrayItems","sortElement","heapRefElement","InsertionSortRefElement","bubbleSortRefElement","selectionSortRefElement","quickSortRefElement","callMergeSortRef","element","heapSortRef","insertionSortRef","bubbleSortRef","selectionSortRef","quickSortRef","toViewCallBack","createStyles","arrayToView","object","randomArray","map","index","key","style","data-toggle","data-placement","title","createRandomArray","first","second","styledArray","obj","height","width","background","listStyle","data","toCall","round","random","ref","App","refElement","setRef","getData","receivedvalue","toMainStart","callSort","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28287162.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport './styles.scss';\r\n\r\ninterface IMyComponentProps {\r\n    sendData:any\r\n    startSorting:any\r\n    updateData:any\r\n}\r\n\r\ninterface IMyComponentState {\r\n    value: any;\r\n    type:any;\r\n    method:any;\r\n}\r\nexport class TopNavigation extends Component <IMyComponentProps, IMyComponentState> {\r\n    \r\n    constructor(props:IMyComponentProps) {\r\n        super(props)\r\n    \r\n        this.state = { // default values of random array.\r\n             value : 50,\r\n             type:100,\r\n             method:'Insertion Sort'\r\n        } \r\n    }\r\n\r\n    changeSize = (event:any) => { // changing the array size.\r\n        if (event.target.value <= 100) {\r\n            this.setState({value:event.target.value});\r\n            this.props.sendData({            \r\n                value : event.target.value,\r\n                type: this.state.type,\r\n                method: this.state.method})\r\n        }\r\n        else {\r\n            this.setState({value:100});\r\n            this.props.sendData({            \r\n                value : 100,\r\n                type: this.state.type,\r\n                method: this.state.method})\r\n        }\r\n    }\r\n    gerateArray = () => {\r\n        this.props.sendData(this.state)\r\n    }\r\n    startSort = () => {\r\n        this.props.startSorting()\r\n    }\r\n    changeType = (event:any) => { // change the array method.\r\n        this.setState({method:event.target.value})\r\n        this.props.sendData({            \r\n            value : this.state.value,\r\n            type:this.state.type,\r\n            method:event.target.value})\r\n    }\r\n    changeSpeed = (event:any) => {  // change the speed type of the array.\r\n        this.setState({type:parseInt(event.target.value)}) \r\n        this.props.updateData({            \r\n            value : this.state.value,\r\n            type:parseInt(event.target.value),\r\n            method: this.state.method})\r\n    }\r\n    render() {\r\n        return (\r\n            <nav className='d-flex justify-content-around'>\r\n                <button className='my-auto px-3' onClick={this.gerateArray}>Generate new Array</button>\r\n                <section className='d-flex'>\r\n                    <label className='my-auto mr-3' >Enter number of Elements in Array</label>\r\n                    <input type='text' className='formControl' value={this.state.value} onChange={this.changeSize} />\r\n                </section>\r\n                <section className='d-flex'>\r\n                    <label className='my-auto mr-2'>Speed:</label>\r\n                    <select className='pr-3' id='speed' value ={this.state.type} onChange = {this.changeSpeed}>\r\n                        <option value={1000} >1000 msec</option>\r\n                        <option value={500}>500 msec</option>\r\n                        <option value={100}>100 msec</option>\r\n                        <option value={10}>10 msec</option>\r\n                    </select>\r\n                </section>\r\n                <section className='d-flex'>\r\n                    <label className='my-auto mr-2'>sort Type:</label>\r\n                    <select className='d-flex justify-content-around text-decoration-none mb-0 pr-1' value={this.state.method} onChange = {this.changeType}>\r\n                        <option value='Bubble Sort'>Bubble sort</option>\r\n                        <option value='Heap Sort'>Heap sort</option>\r\n                        <option value='Insertion Sort'>Insertion sort</option>\r\n                        <option value='Merge Sort'>Merge sort</option>\r\n                        {/* <option value='Quick Sort'>Quick sort</option> */}\r\n                        <option value='selection Sort'>Selection sort</option>\r\n                    </select>\r\n                </section>\r\n                <button className='my-auto px-3'onClick={this.startSort} >Start</button>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopNavigation\r\n","import React, { Component } from 'react';\r\n\r\ninterface IMyComponentProps {\r\n  getChild:any;\r\n}\r\n\r\ninterface IMyComponentState {\r\n    sortedData:any;\r\n}\r\n\r\nexport class MergeSort extends Component <IMyComponentProps, IMyComponentState> {\r\n\r\n  array:any = [];\r\n  toSort:any = this.start();\r\n  interval: any;\r\n\r\n  *start() {\r\n    //Create two arrays for sorting\r\n    let sorted:any = Array.from(this.array);\r\n    let n = sorted.length;\r\n    let buffer = new Array(n);\r\n    \r\n    for (let size = 1; size < n; size *= 2) {\r\n      for (let leftStart = 0; leftStart < n; leftStart += 2*size) {\r\n        //Get the two sub arrays\r\n        let left = leftStart,\r\n            right = Math.min(left + size, n),\r\n            leftLimit = right,\r\n            rightLimit = Math.min(right + size, n);\r\n        //Merge the sub arrays\r\n        let bufferLeft = left;\r\n        //Compare the two sub arrays and merge them in the sorted order\r\n        while (left < leftLimit && right < rightLimit) {\r\n          if (sorted[left] <= sorted[right]) {\r\n            buffer[bufferLeft++] = sorted[left++];\r\n          } else {\r\n            buffer[bufferLeft++] = sorted[right++];\r\n          }\r\n          yield;\r\n          this.toCreateElements(buffer,left+1,right+1)\r\n        }\r\n      \r\n        //If there are elements in the left sub arrray then add it to the result\r\n        while (left < leftLimit) {\r\n          buffer[bufferLeft++] = sorted[left++];\r\n          yield;\r\n          this.toCreateElements(buffer,left,right)\r\n        }\r\n      \r\n        //If there are elements in the right sub array then add it to the result\r\n        while (right < rightLimit) {\r\n          buffer[bufferLeft++] = sorted[right++];\r\n        }\r\n      }\r\n      //Swap the sorted sub array and merge them\r\n      let temp = sorted;\r\n      sorted = buffer;\r\n      buffer = temp;\r\n    }\r\n    this.toCreateElements(sorted,\"sorted\");\r\n    clearInterval(this.interval);\r\n    return sorted;\r\n  }\r\n\r\n  sort = (array:any,timer:any) => {\r\n    this.toSort = this.start();\r\n    this.array = array; \r\n    this.toSort.next();\r\n    for (let i=0;i<array.length;i++) {\r\n      this.toSort.next();\r\n    }\r\n    this.interval = setInterval ( () => {\r\n            this.toSort.next();\r\n    },timer)\r\n  }\r\n  toCreateElements(array:any,i?:any,j?:any) {\r\n    i === array.length-2 &&j === 1 ? this.toCreateElements(array,-1,-1): this.props.getChild(array,i,j);\r\n  }\r\n  render() {return (<></>)}\r\n  // mozilla firefox and safari using marge sort as a default sorting algorithm.\r\n}\r\nexport default MergeSort\r\n","import React, { Component } from 'react'\r\n\r\ninterface IMyComponentProps { getChild:any; }\r\n\r\nexport class HeapSort extends Component <IMyComponentProps> {\r\n   \r\n    array: any;\r\n    toStart:any = this.heapSort();\r\n    interval: any;\r\n    \r\n    constructor(props:IMyComponentProps) { super(props) }\r\n    heapify(arr:any,length:number,splitValue:number) { // to heap the array.\r\n        let largest = splitValue;\r\n        let left = splitValue * 2 + 1;\r\n        let right = left + 1;\r\n        if (left< length && arr[left] > arr[largest]) { \r\n            this.toCreateElements(arr,left,largest)\r\n            largest = left ;\r\n        }\r\n        if (right < length && arr[right] > arr [largest]) { \r\n            this.toCreateElements(arr,right,largest)\r\n            largest = right;\r\n        }\r\n        if (largest != splitValue) {\r\n            [arr[splitValue],arr[largest]] = [arr[largest],arr[splitValue]]\r\n            this.heapify(arr,length,largest);\r\n        }\r\n    }\r\n    *heapSort(arr?:any) {\r\n        arr = this.array;\r\n        let length = arr.length;\r\n        let splitValue = Math.floor(length/2 - 1);\r\n        let unSortArrLength = length - 1;\r\n        while (splitValue >= 0) {\r\n            this.heapify(arr,length,splitValue)\r\n            splitValue--;\r\n            yield;\r\n        }\r\n        while(unSortArrLength >= 0) {\r\n            [arr[0],arr[unSortArrLength]] = [arr[unSortArrLength],arr[0]];\r\n            this.heapify(arr,unSortArrLength,0);\r\n            unSortArrLength--;\r\n            yield;\r\n        }\r\n        this.toCreateElements(arr,\"sorted\"); // while calling this method will understand the array is sorted\r\n        this.toStart = undefined; // for destruct the generator.\r\n        clearInterval(this.interval) \r\n        return arr;\r\n    }\r\n    toCall(arr:any,timer:number) {\r\n        this.array = arr;\r\n        this.toStart = this.heapSort(); // for reset the generator.\r\n        this.interval = setInterval( () => {\r\n            if (this.toStart) {\r\n                this.toStart.next(); // Resume the stopped function.\r\n            }\r\n        }, timer)\r\n    }\r\n    toCreateElements(array:any,i?:any,j?:any) { this.props.getChild(array,i,j) } // evertime while calling this method UI element will create for the array.\r\n    render() {return (<></>)}\r\n}\r\n\r\nexport default HeapSort\r\n","import React, { Component } from 'react'\r\n\r\ninterface IMyComponentProps {getChild:any;}\r\n\r\nexport class InsertionSort extends Component <IMyComponentProps> {\r\n\r\n    interval:any; array = [];\r\n    toSort = this.start();\r\n    constructor(props:IMyComponentProps) { super(props) }\r\n    *start() {\r\n        let len = this.array.length;\r\n        for (let mainElem=0;mainElem<len-1;mainElem++) { // choosing single element for compare with other.\r\n            this.toCreateElements(this.array,mainElem,mainElem+1)\r\n            if (this.array[mainElem] > this.array[mainElem+1]) { // checking next element for swap.\r\n                let temp = this.array[mainElem];\r\n                this.array[mainElem] = this.array[mainElem+1];\r\n                this.array[mainElem+1] = temp;\r\n                this.toCreateElements(this.array,mainElem,mainElem+1)\r\n                yield;\r\n                for (let comparingElement= mainElem;comparingElement>0;comparingElement--) { // for comparing sorted array element with current element\r\n                    this.toCreateElements(this.array,comparingElement,comparingElement-1)\r\n                    if (this.array[comparingElement]<this.array[comparingElement-1]) {\r\n                        yield;\r\n                        let temp = this.array[comparingElement];\r\n                        this.array[comparingElement] = this.array[comparingElement-1];\r\n                        this.array[comparingElement-1] = temp;\r\n                    }\r\n                }\r\n            }\r\n        } clearInterval(this.interval);\r\n        this.toCreateElements(this.array,\"sorted\") // inform sorted array.\r\n        this.toSort = this.start();\r\n    }\r\n    sort = (array:any,timer:any) => {this.array = array; this.interval = setInterval ( () => this.toSort.next(),timer)} // calling generator function.\r\n    toCreateElements = (array:any,i?:any,j?:any) => {this.props.getChild(array,i,j);}\r\n    render() {return (<></>)}\r\n    // chrome v8 engine uses this sort.\r\n}\r\nexport default InsertionSort\r\n","import React, { Component } from 'react'\r\n\r\ninterface IMyComponentProps {getChild:any;}\r\nexport class BubbleSort extends Component <IMyComponentProps> {\r\n\r\n    array: any = [];\r\n    interval: any;\r\n    sort:any = this.bubbleSort()\r\n\r\n    constructor(props:IMyComponentProps) {super(props)}\r\n\r\n    *bubbleSort(){   \r\n        let len = this.array.length;\r\n        for (let mainElem=len;mainElem>0;mainElem--) {\r\n            for (let comparingElem=0;comparingElem<mainElem;comparingElem++) {\r\n                yield;\r\n                if (this.array[comparingElem]>this.array[comparingElem+1]) {\r\n                    let temp = this.array[comparingElem];\r\n                    this.array[comparingElem] = this.array[comparingElem+1];\r\n                    this.array[comparingElem+1] = temp;\r\n                    this.toCreateElements(this.array,comparingElem,comparingElem+1)\r\n                    yield;\r\n                }\r\n                if (mainElem === 1) {\r\n                    clearInterval(this.interval)\r\n                    this.toCreateElements(this.array,\"sorted\"); // while calling this method will understand the array is sorted\r\n                    this.sort = undefined; // destruct the generator function.\r\n                }\r\n            }\r\n        }\r\n    }\r\n    toSort(array:any,timer:any) {\r\n        this.sort = this.bubbleSort(); // to reset generator.\r\n        this.array = array; // to store random array.\r\n        this.interval = setInterval( () => {\r\n            if (this.sort) {\r\n                this.sort.next() // resume the function.\r\n            }\r\n        },timer)}\r\n    toCreateElements(array:any,red?:any,green?:any) {red === 1 && green === 0 ? this.toCreateElements(array,-1,-1): this.props.getChild(array,red,green);} // evertime while calling this method UI element will create for the array.\r\n    render() {return (<></>)}\r\n}\r\nexport default BubbleSort\r\n","import React, { Component } from 'react'\r\n\r\n\r\ninterface IMyComponentProps {getChild:any;}\r\nexport class SelectionSort extends Component <IMyComponentProps> {\r\n\r\n    array: any; interval:any;\r\n    constructor(props:IMyComponentProps) {super(props)}\r\n    toSort:any = this.start();\r\n\r\n    *start () {\r\n        let len = this.array.length, minElement:any;\r\n        for(let mainElem=0;mainElem<len;mainElem++) {\r\n            minElement = mainElem;\r\n            for (let currentElem=mainElem;currentElem<len;currentElem++) { // to compare the main element with other elements.\r\n                this.toCreateElements(this.array,mainElem,currentElem)\r\n                yield;\r\n                if(this.array[minElement] > this.array[currentElem]) { // to find the min element.\r\n                    minElement = currentElem;\r\n                }\r\n            }\r\n            if (minElement !== mainElem) {  // checking to avoid swap same element.\r\n                this.toCreateElements(this.array,this.array[minElement],this.array[mainElem]);\r\n                [this.array[mainElem],this.array[minElement]] = [this.array[minElement],this.array[mainElem]]\r\n                yield;\r\n            }\r\n        }\r\n        this.toCreateElements(this.array,\"sorted\"); // for inform array is sorted.\r\n        clearInterval(this.interval);\r\n    }\r\n    sort = (array:any,timer:any) => {\r\n        this.toSort = this.start();\r\n        this.array = array; \r\n        this.toSort.next();\r\n        this.interval = setInterval ( () => {\r\n                this.toSort.next()\r\n        },timer)\r\n    }\r\n    toCreateElements(array:any,i?:any,j?:any) {\r\n            this.props.getChild(array,i,j) // evertime while calling this method UI element will create for the array.\r\n    }\r\n    render() {return (<></>)}\r\n}\r\n\r\nexport default SelectionSort\r\n","import React, { Component } from 'react'\r\n\r\ninterface IMyComponentProps {\r\n    getChild:any;\r\n  }\r\n\r\nexport class QuickSort extends Component <IMyComponentProps> {\r\n\r\n    array: any;\r\n    timer: number | undefined;\r\n    toSort:any = this.start();\r\n    interval: any;\r\n    constructor(props:IMyComponentProps) { super(props) }\r\n    \r\n    *start() {\r\n        if (!this.array || this.array.length <= 1) {\r\n            return this.array\r\n        }\r\n        var stack = []\r\n        var low = 0\r\n        var high = this.array.length - 1\r\n        stack.push([low, high])\r\n        while (stack.length) {\r\n            let range:any = stack.pop()\r\n            low = range[0]\r\n            high = range[1]\r\n            yield;\r\n            this.toCreateElements(this.array,low,high)\r\n            if (low < high) {\r\n                let pivot = this.array[low];\r\n                let i = low;\r\n                let j = high;\r\n                while (i<j) {\r\n                    do {\r\n                        i++;\r\n                    }\r\n                    while(this.array[i]< pivot);\r\n                    do {\r\n                        j--;\r\n                    }\r\n                    while(this.array[j] > pivot);\r\n                    \r\n                    if (i<j && this.array[i] > pivot && this.array[j] < pivot) {\r\n                        [this.array[i],this.array[j]] = [this.array[j],this.array[i]];\r\n                        console.log(\"inside swapped\")\r\n                        i++;\r\n                        j--;\r\n                    }\r\n                }\r\n                [this.array[low],this.array[j]] = [this.array[j],this.array[low]];\r\n                console.log(\"outside swapped\")\r\n                stack.push([low,j]);\r\n                stack.push([j+1,high])\r\n            }\r\n        }\r\n        this.toCreateElements(this.array);\r\n        return this.array\r\n    }\r\n    // partition(items:any, left:any, right:any) {\r\n    //     var pivot   = items[Math.floor((right + left) / 2)] //middle element is selected as a pivot.\r\n    //     return new Promise( (res:any) => {\r\n    //         setTimeout( () => {\r\n    //             return new Promise( (res) => {\r\n    //                 while (left <= right) {\r\n    //                     while (items[left] < pivot) {\r\n    //                         left++;\r\n    //                     }\r\n    //                     while (items[right] > pivot) {\r\n    //                         right--;\r\n    //                     }\r\n    //                     if (left <= right) {\r\n    //                         [items[left],items[right]] = [items[right],items[left]] // swap left and rigt elements.\r\n    //                         this.toCreateElements(items,left,right);\r\n    //                         left++;\r\n    //                         right--;\r\n    //                     }\r\n    //                 }\r\n    //             })\r\n    //         },500)\r\n    //         res(left);\r\n    //         console.log(\"returned partition\")\r\n    //     })\r\n    // }\r\n    // quickSort(items:any, left:any, right:any) {\r\n    //     var index:any;\r\n    //     if (items.length > 1) {\r\n    //         setTimeout(async() => { // delay for every iterations.\r\n    //             await this.partition(items, left, right)\r\n    //             .then( (data) => {\r\n    //                 index = data;\r\n    //                 console.log(index)\r\n    //             })\r\n    //             if (left < index - 1) { //more elements on the left side of the pivot\r\n    //                 this.quickSort(items, left, index - 1);\r\n    //             }\r\n    //             if (index < right) { //more elements on the right side of the pivot\r\n    //                 this.quickSort(items, index, right);\r\n    //             }\r\n    //         }, this.timer);\r\n    //     }\r\n    // }\r\n    toCreateElements(array:any,i?:any,j?:any) {\r\n        this.props.getChild(array,i,j); // evertime while calling this method UI element will create for the array.\r\n    }\r\n    sort(array:any,timer:number) {\r\n        this.toSort = this.start();\r\n        this.array = array; \r\n        this.toSort.next();\r\n        this.interval = setInterval ( () => {\r\n                this.toSort.next();\r\n        },timer)\r\n    }\r\n    // sort(array:any,timer:number) {\r\n    //     this.timer = timer; // for reset timers.\r\n    //     this.quickSort(array,0,array.length -1)\r\n    // }\r\n    render() { return (<></>) }\r\n}\r\n\r\nexport default QuickSort\r\n// if (low < high) {\r\n//     var pivot = Math.floor((low + high) / 2)\r\n//     stack.push([low, pivot])\r\n//     stack.push([pivot+1, high])\r\n//     console.log(low,high);\r\n//     [this.array[pivot],this.array[high]] = [this.array[high],this.array[pivot]];\r\n//     while (low < high) {\r\n//         yield;\r\n//         while (this.array[low] < this.array[pivot]) {\r\n//             low++ ;\r\n//         }\r\n//         while (this.array[high] > this.array[pivot]) {\r\n//             high-- ;\r\n//         }\r\n//         if (this.array[low] >= this.array[pivot] && this.array[high] <= this.array[pivot]) {\r\n//             [this.array[low],this.array[high]] = [this.array[high],this.array[low]]\r\n//             this.toCreateElements(this.array,low,high)\r\n            \r\n//         }\r\n//         console.log(\"called working\")\r\n//     }\r\n//     [this.array[low],this.array[pivot]] = [this.array[pivot],this.array[low]]\r\n// }","import React, { Component } from 'react'\r\nimport MergeSort from '../sortingComponents/MergeSort';\r\nimport HeapSort from '../sortingComponents/HeapSort';\r\nimport InsertionSort from '../sortingComponents/InsertionSort';\r\nimport BubbleSort from '../sortingComponents/BubbleSort';\r\nimport SelectionSort from '../sortingComponents/selectionSort';\r\nimport QuickSort from '../sortingComponents/QuickSort';\r\n\r\n\r\ninterface IMyComponentProps {}\r\n\r\ninterface IMyComponentState {\r\n    arrayToView:any;\r\n    object:Object;\r\n    randomArray:any;\r\n}\r\n\r\nexport class Main extends Component <IMyComponentProps, IMyComponentState> {\r\n\r\n    arrayItems:any ;\r\n    sortElement:any;\r\n    heapRefElement: any;\r\n    InsertionSortRefElement: any;\r\n    bubbleSortRefElement: any;\r\n    selectionSortRefElement:any;\r\n    quickSortRefElement: any;\r\n\r\n    constructor(props:IMyComponentProps) {\r\n        super(props)\r\n        this.state = {\r\n            arrayToView:this.arrayItems,\r\n            object: {\r\n                value:50,\r\n                type:100,\r\n                method: \"Insertion Sort\"\r\n            },\r\n            randomArray:[],\r\n        }\r\n    }\r\n    toCreateElements(array:any) { // it will create html lists.\r\n        this.arrayItems = array.map( (element:any,index:any) => \r\n        <li key={index} style={element.style} className='mx-1' data-toggle=\"tooltip\" data-placement=\"right\" title={`value: ${element.value}`}></li>)\r\n        this.setState({arrayToView:this.arrayItems});\r\n    }\r\n    componentDidMount() {\r\n         if (this.state.randomArray.length === 0)  {\r\n             this.createRandomArray(this.state.object);\r\n         }\r\n    }\r\n    createStyles(array:any,first?:any,second?:any) { // set styles for elements.\r\n        let styledArray = [];\r\n        for (let element=0;element<array.length;element++) {\r\n            if (element === first) {\r\n                let obj = {\r\n                    value:array[element],\r\n                    style: {\r\n                        height:`${array[element]}px`,\r\n                        width:'5px',\r\n                        background:\"#90EE90\",\r\n                        listStyle:'none',\r\n                    }\r\n                }\r\n                styledArray.push(obj)\r\n            }\r\n            else if (element === second) {\r\n                let obj = {\r\n                    value:array[element],\r\n                    style: {\r\n                        height:`${array[element]}px`,\r\n                        width:'5px',\r\n                        background:'red',\r\n                        listStyle:'none',\r\n                    }\r\n                }\r\n                styledArray.push(obj)\r\n            }\r\n            else if (first === \"sorted\") {\r\n                let obj = {\r\n                    value:array[element],\r\n                    style: {\r\n                        height:`${array[element]}px`,\r\n                        width:'5px',\r\n                        background:\"#FF2EC7\",\r\n                        listStyle:'none',\r\n                    }\r\n                }\r\n                styledArray.push(obj)\r\n            }\r\n            else {\r\n                let obj = {\r\n                    value:array[element],\r\n                    style: {\r\n                        height:`${array[element]}px`,\r\n                        width:'5px',\r\n                        background:\"blue\",\r\n                        listStyle:'none',\r\n                    }\r\n                }\r\n                styledArray.push(obj)\r\n            }\r\n        }\r\n        this.toCreateElements(styledArray);\r\n    }\r\n    updateData(data:any) {\r\n        this.setState({object:data})\r\n    }\r\n    callSort() { // calling sort method.\r\n        const object:any = this.state.object;\r\n        const array:any = this.state.randomArray;\r\n        switch(object.method) {\r\n            case \"Merge Sort\":\r\n                this.sortElement.sort(array,object.type);\r\n                break;\r\n            case \"Insertion Sort\":\r\n                this.InsertionSortRefElement.sort(array,object.type);\r\n                break;\r\n            case \"Bubble Sort\":\r\n                this.bubbleSortRefElement.toSort(array,object.type)\r\n                break;\r\n            case \"Heap Sort\":\r\n                this.heapRefElement.toCall(array,object.type);\r\n                break;  \r\n            case \"selection Sort\":\r\n                this.selectionSortRefElement.sort(array,object.type);    \r\n                break;\r\n            case \"Quick Sort\" :\r\n                this.quickSortRefElement.sort(array,object.type)\r\n                break;\r\n        }\r\n    }\r\n    createRandomArray(object:any) {\r\n        let array = [];\r\n        for (let i=0;i<object.value;i++) {\r\n            const value = Math.round(Math.random() * (600 - 100) + 10);\r\n            array.push(value)\r\n        }\r\n        this.createStyles(array)\r\n        this.setState({randomArray:array,object:object})\r\n        \r\n    }\r\n    callMergeSortRef = (element:any) => {\r\n        this.sortElement = element\r\n    }\r\n    heapSortRef = (element:any) => {\r\n        this.heapRefElement = element\r\n    }\r\n    insertionSortRef = (element:any) => {\r\n        this.InsertionSortRefElement = element;\r\n    }\r\n    bubbleSortRef = (element:any) => {\r\n        this.bubbleSortRefElement = element;\r\n    }\r\n    selectionSortRef = (element:any) => {\r\n        this.selectionSortRefElement = element;\r\n    }\r\n    quickSortRef = (element: any) => {\r\n        this.quickSortRefElement = element;\r\n    }\r\n    toViewCallBack = (value:any,i?:any,j?:any) => {\r\n        this.createStyles(value,i,j)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul className='d-flex justify-content-center'>{this.arrayItems}</ul>\r\n                <BubbleSort ref={this.bubbleSortRef} getChild={this.toViewCallBack}/>\r\n                <MergeSort ref= {this.callMergeSortRef} getChild={this.toViewCallBack}/>\r\n                <HeapSort ref={this.heapSortRef} getChild={this.toViewCallBack}/>\r\n                <QuickSort ref={this.quickSortRef} getChild={this.toViewCallBack}/>\r\n                <InsertionSort ref={this.insertionSortRef} getChild={this.toViewCallBack}/>\r\n                <SelectionSort ref={this.selectionSortRef} getChild={this.toViewCallBack}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport './App.css';\nimport TopNavigation from './components/navigation/TopNavigation';\nimport Main from './components/main/Main';\n\ninterface IMyComponentProps {}\n\ninterface IMyComponentState {\n  receivedvalue: any\n}\n\nclass App extends React.Component <IMyComponentProps, IMyComponentState>{\n\n  refElement:any;\n\n  constructor(props:IMyComponentProps) {\n    super(props);\n\n    this.state = {\n      receivedvalue : 30\n    };\n  }\n  setRef = (element:any) => { // this method for creating reference for main component\n    this.refElement = element\n  }\n  getData = (value:any) => { // get data from top navigation component.\n    this.setState({receivedvalue:value})\n    this.refElement.createRandomArray(value)\n  }\n  updateData = (value:any) => {\n    this.setState({receivedvalue:value});\n    this.refElement.updateData(value)\n  }\n  toMainStart = () => {\n    this.refElement.callSort()\n  }\n  render() {\n    return(\n      <main>\n        <TopNavigation sendData ={this.getData} updateData = {this.updateData} startSorting={this.toMainStart}/>\n        <Main ref = {this.setRef}/>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}